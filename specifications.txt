# General Requirements
1. The project is a database system for managing information about natural parks.
2. The system should store information about provinces, parks, natural elements (vegetal, animal, mineral), park personnel, visitors, and accommodations.
3. The system should use a database engine MySQL.
4. The database should contain test data for demonstration.
5. The project should include documentation (Carátula, Introducción, ER model, Relational model, Assumptions, Physical design, Code, Conclusions).

# Data Requirements
1. Store information about provinces, including the responsible organization for parks. Each province should have one and only one responsible organization for its parks. TESTED
2.a. Store information about parks, including name, declaration date, contact email, code. TESTED
2.b. Por motivos de eficiencia se desea favorecer las consultas referentes al número
de parques existentes en cada Provincia and la superficie total declarada parque nat-
ural en cada Provincia.
2.b.solution. in order to be able to get the total park area for each province, we need to know how much surface/extension is split between provinces for interprovince parks. TESTED (Structure supports query)
2.b.note. Efficiency aspect relates to Additional Req 5 (Indexes).
2.c. Un parque puede estar compartido por más de una Provincia. TESTED
3.a. Store information about park areas, including name and extension.  TESTED
3.b. A park is composed of several areas. TESTED
4. Store information about natural elements (vegetal, animal, mineral) residing in each area, including scientific name, common name, and number of individuals. TESTED
5. Store specific information for vegetal elements (if they flower and when is their flowering period). TESTED
6. Store specific information for animal elements (diet (herbívora, carnívora u omnívora), mating period). TESTED
7. Store specific information for mineral elements (crystal or rock). TESTED
8. Track which elements serve as food for other elements (excluding on anything feeding on minerals and vegetal elements feeding on other elements). (Implemented via Triggers) TESTED
9. Store information about park personnel (DNI, CUIL, name, address, phone numbers, salary). TESTED
10. Differentiate between different types of personnel: management, surveillance, research, and conservation. TESTED
10.a. Personal de gestión: registra los datos de los visitantes del parque and están des-
tinados en una entrada del parque (las entradas se identifican por un número). TESTED
10.b. Personal de vigilancia: vigila un área determinada del parque que recorre en
un vehículo (tipo and matrícula). Puede ocurrir que use el mismo vehículo para mas
de un área, pero siempre es el mismo en cada área que vigila. TESTED
10.c.1. Personal investigador: Tiene una titulación que ha de recogerse and pueden re-
alizar (incluso conjuntamente) proyectos de investigación sobre un determinado
elemento. (Implemented via research_projects.element_id FK) TESTED
10.c.2. Un proyecto de investigación tiene un presupuesto and un periodo de real-
ización. TESTED
10.d. Personal de conservación: mantiene and conserva un área determinada del par-
que. Cada uno lo realiza en una especialidad determinada (limpieza, caninos). (Implemented via conservation_personnel FK to park_areas) TESTED
11. Store information about visitors (DNI, name, address, profession, and which accomodation (foreign key) they stay in (only one)). TESTED
12. Store information about accommodations (capacity, category). TESTED
13.a. Store information about excursions (days of the week, time, by foot or by vehicle), TESTED
13.b. and which accommodations organize them (can be more than one). (Implemented via accommodation_excursions M:N table) TESTED
13.c. any visitor in a given park can come to any excursion in that park (suggests many to many relation). (Implemented via visitor_excursions M:N table) TESTED

# Functional Requirements
1. Determine the province with the most natural parks. TESTED
2. Identify vegetal species found in at least half of the parks. TESTED
3. Count the number of visitors in parks with specific codes (A and B). TESTED
4. Implement a trigger that sends an email to the park's contact email when the quantity of a species decreases. (Implemented via logging trigger) TESTED
5. Implement database constraints based on the problem domain. (PK, FK, UNIQUE, NOT NULL, ENUM, Triggers) TESTED

# Additional Requirements from 2019 TP
1. Verify if public information can be used in the model (e.g., a list of national parks). DONE, information already in data dir
2. Estimate the size of the tables. (Analysis Task)
3. Identify species found in all parks. TESTED
4. Identify species found in only one park. TESTED
5. Propose suitable indexes for the queries and analyze the execution plan. (Analysis Task)
6. Create a procedure that compares tables, indexes, and constraints of two databases. (Implemented, not explicitly tested)
7. Investigate concurrency control and recovery mechanisms in two commercial database engines. (Report Task)
